{"version":3,"file":"forum.js","mappings":"MACA,IAAIA,EAAsB,CCA1BA,EAAyBC,IACxB,IAAIC,EAASD,GAAUA,EAAOE,WAC7B,IAAOF,EAAiB,QACxB,IAAM,EAEP,OADAD,EAAoBI,EAAEF,EAAQ,CAAEG,EAAGH,IAC5BA,GCLRF,EAAwB,CAACM,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXP,EAAoBS,EAAEF,EAAYC,KAASR,EAAoBS,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3ER,EAAwB,CAACc,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFf,EAAyBM,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,M,+BCLvD,MAAM,EAA+BC,OAAOC,KAAKC,OAAO,iBCAlD,EAA+BF,OAAOC,KAAKC,OAAO,a,aCAxD,MAAM,EAA+BF,OAAOC,KAAKC,OAAO,gC,aCIxDC,IAAAA,aAAAA,IAAqB,wCAAwC,YAC3DC,EAAAA,EAAAA,QAAOC,IAAAA,UAAuB,CAAC,WAAY,aAAa,WACtD,IAAMC,EAAUH,IAAAA,MAAAA,UAAoB,WAE9BI,EADWC,KAAKC,QAAQC,cAAc,cACnBC,iBAAiB,KAE1CJ,EAAQK,SAAQ,SAACC,GACXA,EAAKC,UAAUC,SAAS,gBAEfF,EAAKG,KACTC,WAAWX,KAClBC,EAAQ,GAAGW,WAAW,GAAGC,UAAY,sB","sources":["webpack://@justoverclock/internal-link-dofollow/webpack/bootstrap","webpack://@justoverclock/internal-link-dofollow/webpack/runtime/compat get default export","webpack://@justoverclock/internal-link-dofollow/webpack/runtime/define property getters","webpack://@justoverclock/internal-link-dofollow/webpack/runtime/hasOwnProperty shorthand","webpack://@justoverclock/internal-link-dofollow/webpack/runtime/make namespace object","webpack://@justoverclock/internal-link-dofollow/external root \"flarum.core.compat['common/extend']\"","webpack://@justoverclock/internal-link-dofollow/external root \"flarum.core.compat['forum/app']\"","webpack://@justoverclock/internal-link-dofollow/external root \"flarum.core.compat['forum/components/CommentPost']\"","webpack://@justoverclock/internal-link-dofollow/./src/forum/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/extend'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['forum/components/CommentPost'];","import { extend } from 'flarum/common/extend';\nimport app from 'flarum/forum/app';\nimport CommentPost from 'flarum/forum/components/CommentPost';\n\napp.initializers.add('justoverclock/internal-link-dofollow', () => {\n  extend(CommentPost.prototype, ['oncreate', 'onupdate'], function () {\n    const baseUrl = app.forum.attribute('baseUrl');\n    const postBody = this.element.querySelector('.Post-body');\n    const linkTag = postBody.querySelectorAll('a');\n\n    linkTag.forEach((link) => {\n      if (link.classList.contains('PostMention')) return;\n\n      const href = link.href;\n      if (href.startsWith(baseUrl)) {\n        linkTag[0].attributes[1].nodeValue = 'dofollow';\n      }\n    });\n  });\n});\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","app","extend","CommentPost","baseUrl","linkTag","this","element","querySelector","querySelectorAll","forEach","link","classList","contains","href","startsWith","attributes","nodeValue"],"sourceRoot":""}